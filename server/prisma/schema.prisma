generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  role      userRole @default(user)

  deliverAddress DeliverAddress[]
  review         Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model DeliverAddress {
  id       String  @id @default(uuid())
  address  String?
  province String?
  city     String?
  barangay String?
  zipCode  String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("delivery_addresses")
}

model Product {
  id          String  @id @default(uuid()) @map("product_id")
  name        String
  description String?

  ProductImage ProductImage[]
  review       Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String @id @default(uuid())
  imageUrl  String
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Review {
  id      String  @id @default(uuid())
  rating  Int     @default(0)
  comment String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reviews")
}

// ENUMS
enum userRole {
  user
  employee
  admin
}

enum userStatus {
  active
  inactive
  banned
}
