generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  role      userRole @default(user)

  deliverAddress DeliverAddress[]
  review         Review[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Product        Product[]
  ProductVariant ProductVariant[]
  WishList       WishList[]
  Cart           Cart[]

  @@map("users")
}

model DeliverAddress {
  id       String  @id @default(uuid())
  address  String?
  province String?
  city     String?
  barangay String?
  zipCode  String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deliver_addresses")
}

model Product {
  id          String   @id @default(uuid()) @map("product_id")
  name        String
  description String?
  price       Decimal? @db.Decimal(10, 2)
  stock       Int      @default(0)

  ProductImage   ProductImage[]
  review         Review[]
  ProductVariant ProductVariant[]

  categoryId String
  category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  brandId String
  brand   ProductBrand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  updatedBy String?
  user      User?      @relation(fields: [updatedBy], references: [id], onDelete: Cascade)
  WishList  WishList[]
  CartItem  CartItem[]
}

model WishList {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) 
}

model ProductImage {
  id        String @id @default(uuid())
  imageUrl  String
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model ProductCategory {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_categories")
}

model ProductBrand {
  id   String @id @default(uuid())
  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_brands")
}

model ProductVariant {
  id String @id @default(uuid())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  sku         String  @unique
  variantName String
  price       Decimal @db.Decimal(10, 2)
  stock       Int     @default(0)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  updatedBy String?
  user      User?      @relation(fields: [updatedBy], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
}

model Cart {
  id     String     @id @default(uuid())
  userId String
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id     String @id @default(uuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String? // If using ProductVariant
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2) // Save the price at the time it was added

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      String  @id @default(uuid())
  rating  Int     @default(0)
  comment String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reviews")
}

// ENUMS
enum userRole {
  user
  employee
  admin
}

enum userStatus {
  active
  inactive
  banned
}
