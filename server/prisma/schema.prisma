generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  role      userRole @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review         Review[]
  deliverAddress DeliverAddress[]
  Product        Product[]
  ProductVariant ProductVariant[]
  WishList       WishList[]
  Cart           Cart[]
  logs           ProductAuditLog[]

  @@map("users")
}

model DeliverAddress {
  id       String  @id @default(uuid())
  address  String?
  province String?
  city     String?
  barangay String?
  zipCode  String?
  userId   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deliver_addresses")
}

model Product {
  id           String   @id @default(uuid()) @map("product_id")
  name         String
  description  String?
  price        Decimal? @db.Decimal(10, 2)
  color        String?
  sku          String?  @unique
  stock        Int      @default(0)
  reOrderLevel Int?     @default(0)
  categoryId   String
  brandId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?  @default("73f65300-8dcf-4929-af45-dce69467a90f")

  brand          ProductBrand      @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category       ProductCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user           User?             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  ProductImage   ProductImage[]
  review         Review[]
  ProductVariant ProductVariant[]
  WishList       WishList[]
  CartItem       CartItem[]
  batches        ProductBatch[]
  logs           ProductAuditLog[]
}

model ProductVariant {
  id           String   @id @default(uuid())
  productId    String
  sku          String?  @unique
  variantName  String
  price        Decimal  @db.Decimal(10, 2)
  stock        Int      @default(0)
  reOrderLevel Int?     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  updatedBy    String?

  product  Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  user     User?             @relation(fields: [updatedBy], references: [id], onDelete: Cascade)
  CartItem CartItem[]
  batches  ProductBatch[]
  logs     ProductAuditLog[]
}

model ProductBatch {
  id             String    @id @default(uuid())
  batchNumber    String
  productId      String
  variantId      String?
  quantity       Int
  receivedAt     DateTime
  expirationDate DateTime?

  variant ProductVariant?   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  product Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  logs    ProductAuditLog[]
}

model ProductAuditLog {
  id        String   @id @default(uuid())
  productId String
  variantId String? 
  batchId   String?
  field     String
  oldValue  String?
  newValue  String?
  action    String
  reason    String?
  userId    String
  createdAt DateTime @default(now())

  batch   ProductBatch?   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model WishList {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model ProductImage {
  id        String   @id @default(uuid())
  imageUrl  String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("product_categories")
}

model ProductBrand {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("product_brands")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  variantId String? // If using ProductVariant
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2) // Save the price at the time it was added
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  cart    Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// ENUMS
enum userRole {
  user
  employee
  admin
}

enum userStatus {
  active
  inactive
  banned
}
